using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace Geeks.SqlUtils.Tests
{
    using System.Diagnostics;

    [TestClass]
    public class UnitTest1
    {
        [TestMethod]
        public void TestLevenshtein()
        {
            const string sNew = @"GAMBOL
0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789
0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789
0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789
0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789
0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789
0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789
0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789
0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789
0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789
0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789
";
            const string sOld = @"GUMBO
0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789
0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789
0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789
0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789
0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789
0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789
0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789
0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789
0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789
0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789
";
            try
            {
                var l = new Levenshtein();

                while (true)
                {
                    /// Original version
                    /// 
                    ///
                    /* Read the initial time. */
                    DateTime startTime = DateTime.Now;

                    l.LD(sNew, sOld);

                    /* Read the end time. */
                    DateTime stopTime = DateTime.Now;

                    /* Compute the duration between the initial and the end time. */
                    TimeSpan duration = stopTime - startTime;
                    Debug.WriteLine("Original:" + duration);

                    /// New version
                    /// 
                    ///
                    /* Read the initial time. */
                    startTime = DateTime.Now;

                    l.iLD(sNew, sOld);

                    /* Read the end time. */
                    stopTime = DateTime.Now;

                    /* Compute the duration between the initial and the end time. */
                    duration = stopTime - startTime;
                    Debug.WriteLine("New     :" + duration);

                    Debug.WriteLine("----------------");
                }
            }
            catch (Exception e)
            {
                Debug.WriteLine(e.ToString());
            }

        }

        [TestMethod]
        public void TestMethod1()
        {
            var guidBytes = new byte[16];

            var longBytes = BitConverter.GetBytes(long.MinValue);

            longBytes.CopyTo(guidBytes, 8);

            var guid = new Guid(guidBytes);
        }
    }
}
